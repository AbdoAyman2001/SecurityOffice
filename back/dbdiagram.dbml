// ______________________________________ PEOPLE ______________________________________
Table People_History {
  note:'''
    - This table is used for storing the people's information regardless they are family member or worker
  '''
  PersonRecordID int [pk, increment, note: 'Primary key for this specific historical record.']
  PersonGUID uuid [not null, note: 'The permanent, unchanging ID for an individual. Links all their records together.']

  // Personal details that can change over time
  FullNameArabic nvarchar(255) [not null]
  FullNameEnglish varchar(255)
  Nationality varchar(50)
  NationalID varchar(50)
  AccessAreas varchar(50)
  DateOfBirth date
  Qualification varchar(50)
  IdAddress varchar(255)
  Alive boolean [default:true]
  IdScan varchar(255) [note:'link to the image of the Id']
  FaceEncodings VECTOR [note:'for face recognition']
  SCRequestLetter int [ref: > Correspondence.CorrespondenceId, note:'The letter the sc request was made']
  ResponseLetter int [ref: > Correspondence.CorrespondenceId, note:'The number that we mentioned to respond on the Person with the Approval']

  // --- Version Control Columns ---
  StartDate datetime [not null, note: 'The date this version of the information became effective.']
  EndDate datetime [note: 'NULL means this is the current, active version.']
  IsCurrent boolean [not null, default: true, note: 'Flag to easily find the current version.']
  Version int [not null, note: 'Version number for this person\'s personal data history.']
}
Table Employment_History {
  EmploymentRecordID int [pk, increment]
  PersonGUID uuid [not null, ref: > People_History.PersonGUID, note: 'Links this job record back to the person in People_History.']
  CompanyID int [not null, ref: > Companies.CompanyID]

  // Job-specific details
  JobTitle varchar(100)
  StillHired boolean [default: true]

  // Version Control Columns
  StartDate datetime [not null, note: 'When this job record became active.']
  EndDate datetime [note: 'Null means this is the current job record.']
  IsCurrent boolean [not null, default: true, note: 'Flag for the current job.']
  Version int [not null, note: 'Version number for this person\'s employment history.']
}
Table FamilyRelationships {
  RelationshipID int [pk, increment]
  WorkerPersonGUID uuid [not null, ref: > People_History.PersonGUID, note: 'The GUID of the person who is the employee.']
  FamilyMemberPersonGUID uuid [not null, ref: > People_History.PersonGUID, note: 'The GUID of the person who is the family member.']
  RelationshipType varchar [not null, note: 'e.g., Spouse, Son, Daughter']
  Status varchar [not null, default: 'Active', note: 'e.g., Active, Left, Deceased']
  ProofDocumentURL varchar [note: 'Link to the scanned proof document.']
}
// _______________________________________________________________________________________________
// |
// |
// |
//______________________________________ Companies ______________________________________
Table Companies {
  CompanyID int [pk, increment]
  CompanyName varchar(255) [not null, unique]
  ContactInfo varchar(255)
}
//___________________________________________________________________________________________
// |
// |
// |
//______________________________________ CORRESPONDENCE _____________________________________
Table Correspondence {
  CorrespondenceId int [pk, increment]
  ParentCorrespondenceId int [ref: > Correspondence.CorrespondenceId]
  ReferenceNumber varchar(255) 
  CorrespondenceDate date
  Type int [ref: > CorrespondenceTypes.CorrespondenceTypeId]
  Subject varchar(255)
  Direction varchar(255) [note:'the flow of the correspondence, Incoming, Outgoing and Internal']
  Priority enum("high", 'normal', 'low')
  Summary varchar(1000)
  CurrentStatus int [ref: > CorrespondenceTypeProcedure.ProcedureId, note:'Current status of the correspondence']
  AssignedTo int [ref: > Users.userId, note:'User assigned to handle this correspondence']
  CreatedAt timestamp [default: `now()`]
  UpdatedAt timestamp [default: `now()`]
}

Table CorrespondenceContacts{
  ContactId int [ref: > Contacts.ContactId]
  CorrespondenceId int [ref: > Correspondence.CorrespondenceId]
  Role enum('Sender','Recipient','CC','BCC')

  indexes {
    (CorrespondenceId, ContactId, Role) [pk]
  }
} 

Table Attachments { 
  AttachmentId int [pk, increment]
  CorrespondenceId int [ref: > Correspondence.CorrespondenceId]
  File varchar(500) [not null, note:'FileField path to uploaded file']
  FileName varchar(255) [not null, note:'Original filename']
  FileType varchar(100) [note:'mime type']
  FileSize bigint [note:'File size in bytes']
  UploadedAt timestamp [default: `now()`]
}

Table CorrespondenceTypes { 
  CorrespondenceTypeId int [pk, increment]
  TypeName varchar(255)
}

Table CorrespondenceTypeProcedure {
  ProcedureId int [pk, increment]
  CorrespondenceType int [ref: > CorrespondenceTypes.CorrespondenceTypeId]
  ProcedureName varchar(255) [not null]
  IsInitial boolean [default: false, note:'True if this is the initial status for new correspondence']
  IsFinal boolean [default: false, note:'True if this is a final status']
  OrderIndex int [note:'Order of this procedure in the workflow']
}

Table CorrespondenceStatusLog {
  Id int [pk, increment]
  CorrespondenceId int [ref: > Correspondence.CorrespondenceId]
  FromStatus int [ref: > CorrespondenceTypeProcedure.ProcedureId, note:'Previous status (null for initial)']
  ToStatus int [ref: > CorrespondenceTypeProcedure.ProcedureId, note:'New status']
  ChangedBy int [ref: > Users.userId, note:'User who made the change']
  ChangeReason text [note:'Optional reason for the status change']
  CreatedAt timestamp [default: `now()`]
}
Table Contacts {
  ContactId int [pk, increment]
  Name varchar(255) [not null]
  ContactType enum('Person', 'Organization') [not null, default: 'Person', note: 'Specifies if the contact is an individual or an official body.']
  IsApprover boolean [not null, default: false, note: 'True if this contact (must be an Organization) has the authority to approve permits.']
}
Table Users { 
  userId int [pk, increment]
  username varchar(200)
  password varchar(200)
}
//___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ Approval ___________________________________________
Table Permits {
  PermitID int [pk, increment]
  PermitHolderType enum('Person', 'Company') [not null, note: 'Specifies if the permit is for a person or a company.']
  PersonGUID uuid [ref: > People_History.PersonGUID, note:'FK to People_History. Filled if PermitHolderType is Person.']
  CompanyID int [ref: > Companies.CompanyID, note:'FK to Companies. Filled if PermitHolderType is Company.']
  
  PermitStatus enum('Pending', 'Active', 'Rejected', 'Expired', 'Revoked') [not null, default: 'Pending', note: 'Overall status derived from the ApprovalDecisions.']
  EffectiveDate date [note: 'When the permit becomes active.']
  ExpiryDate date [note: 'When the permit expires.']
  
  note: 'A single permit request for an entity (person or company) to gain site access.'
}

Table ApprovalDecisions {
  ApprovalDecisionID int [pk, increment]
  PermitID int [not null, ref: > Permits.PermitID]
  ApproverContactId int [not null, ref: > Contacts.ContactId, note: 'FK to the Contact (of type Organization) that is the official approver.'] // Changed from ApproverID
  
  DecisionStatus enum('Pending', 'Approved', 'Rejected') [not null, default: 'Pending']
  DecisionDate datetime
  CorrespondenceId int [ref: > Correspondence.CorrespondenceId, note: 'Link to the formal letter of approval/rejection. NULL if verbal.']
  Notes varchar(1000) [note: 'Required for verbal approvals.']
  
  indexes {
    (PermitID, ApproverContactId) [unique] // Changed from ApproverID
  }
}
// ___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ Accidents ___________________________________________
Table Accidents { 
  AccidentId int [pk, increment]
  Description varchar(4096)
  PersonGUID uuid [ref: > People_History.PersonGUID, note:'FK to People_History. Filled if PermitHolderType is Person.']
  Address varchar(1024)  
  Date date 
}
// ___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ Relocation _________________________________________
Table Relocation { 
  RelocationId int [pk, increment]
  RelocationLetter int [ref: > Correspondence.CorrespondenceId]
  PersonGUID uuid [ref: > People_History.PersonGUID, note:'FK to People_History. Filled if PermitHolderType is Person.']
  ApprovalStatus enum("انتظار","حاصل")
  BuildingNumber int
  BuildingLetter enum("A","B","C","D")
  FlatNumber int
}
Table RelocationPeriod { 
  RelocationPeriodId int [pk, increment]
  RelocationId int [ref: > Relocation.RelocationId]
  StartDate date 
  EndDate date
}
// ___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ Cars _________________________________________
Table Vehicle { 
  VehicleId int [increment]
  Organization enum("Owner","Contractor")
  CorrespondenceId int [ref: > Correspondence.CorrespondenceId]
  PlateNumber varchar(10)
  StartDate date
  EndDate date
  Company int [ref: > Companies.CompanyID]
  indexes {
    (VehicleId,Organization) [pk]
  }
}
Table CarPermit { 
  CarPermitId int [pk, increment]
  VehicleId int [ref: > Vehicle.VehicleId]
  StartDate date
  EndDate date
}
// ___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ CardPermits  _______________________________________
Table CardPermits { // Renamed from 'Permits'
  permit_id int [pk, increment]
  permit_number varchar(50) [not null, unique] // Unique identifier for the physical card
  permit_type enum("Temporary", "Permanent")
  PersonGUID uuid [ref: > People_History.PersonGUID, note:'FK to People_History. Filled if PermitHolderType is Person.']
  issue_date date [not null]
  expiration_date date
  status varchar(20) [not null, default: 'Active'] // Consider ENUM if supported by your DB: 'Active', 'Expired', 'Revoked', 'Lost'
  notes text
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

Table CardPhotos {
  photo_id int [pk, increment]
  permit_id int [not null, unique] // One photo per permit
  file_name varchar(255) [not null] // Original file name
  file_path varchar(500) [not null] // Path or URL to the stored image file (e.g., S3 URL, local server path)
  file_size_bytes bigint
  mime_type varchar(50) // e.g., 'image/jpeg', 'image/png'
  uploaded_at timestamp [default: `now()`]
}

Ref: CardPhotos.permit_id > CardPermits.permit_id [delete: cascade] // Updated reference

// ___________________________________________________________________________________________
// |
// |
// |
// ______________________________________ SETTINGS _______________________________________
Table Settings {
  id int [pk, increment]
  key varchar(100) [not null, unique, note: 'Setting key/name']
  value text [not null, note: 'Setting value']
  setting_type varchar(20) [not null, default: 'text', note: 'Type: text, number, boolean, json, file']
  description text [note: 'Description of this setting']
  category varchar(50) [not null, default: 'general', note: 'Setting category']
  is_active boolean [not null, default: true]
  created_at timestamp [default: `now()`]
  updated_at timestamp [default: `now()`]
}

// ___________________________________________________________________________________________
// |
// |
// |
