# Generated by Django 5.1.4 on 2025-07-20 10:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Accidents',
            fields=[
                ('accident_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, max_length=4096, null=True)),
                ('person_guid', models.UUIDField(help_text='FK to People_History. Person involved in the accident.')),
                ('address', models.CharField(blank=True, max_length=1024, null=True)),
                ('date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Accident',
                'verbose_name_plural': 'Accidents',
                'db_table': 'accidents',
            },
        ),
        migrations.CreateModel(
            name='CardPermits',
            fields=[
                ('permit_id', models.AutoField(primary_key=True, serialize=False)),
                ('permit_number', models.CharField(help_text='Unique identifier for the physical card', max_length=50, unique=True)),
                ('permit_type', models.CharField(choices=[('Temporary', 'Temporary'), ('Permanent', 'Permanent')], max_length=20)),
                ('person_guid', models.UUIDField(help_text='FK to People_History. Person the card is issued to.')),
                ('issue_date', models.DateField()),
                ('expiration_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Expired', 'Expired'), ('Revoked', 'Revoked'), ('Lost', 'Lost')], default='Active', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Card Permit',
                'verbose_name_plural': 'Card Permits',
                'db_table': 'card_permits',
            },
        ),
        migrations.CreateModel(
            name='CompaniesHistory',
            fields=[
                ('company_id', models.AutoField(primary_key=True, serialize=False)),
                ('company_name', models.CharField(max_length=255)),
                ('company_type', models.CharField(blank=True, max_length=100, null=True)),
                ('contact_info', models.TextField(blank=True, null=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=True)),
                ('version', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Company History',
                'verbose_name_plural': 'Companies History',
                'db_table': 'companies_history',
            },
        ),
        migrations.CreateModel(
            name='Contacts',
            fields=[
                ('contact_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('contact_type', models.CharField(choices=[('Person', 'Person'), ('Organization', 'Organization')], default='Person', help_text='Specifies if the contact is an individual or an official body.', max_length=50)),
                ('is_approver', models.BooleanField(default=False, help_text='True if this contact (must be an Organization) has the authority to approve permits.')),
            ],
            options={
                'verbose_name': 'Contact',
                'verbose_name_plural': 'Contacts',
                'db_table': 'contacts',
            },
        ),
        migrations.CreateModel(
            name='CorrespondenceTypes',
            fields=[
                ('correspondence_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('type_name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Correspondence Type',
                'verbose_name_plural': 'Correspondence Types',
                'db_table': 'correspondence_types',
            },
        ),
        migrations.CreateModel(
            name='FamilyRelationships',
            fields=[
                ('relationship_id', models.AutoField(primary_key=True, serialize=False)),
                ('worker_person_guid', models.UUIDField(help_text='The GUID of the person who is the employee.')),
                ('family_member_person_guid', models.UUIDField(help_text='The GUID of the person who is the family member.')),
                ('relationship_type', models.CharField(choices=[('Spouse', 'Spouse'), ('Son', 'Son'), ('Daughter', 'Daughter'), ('Father', 'Father'), ('Mother', 'Mother'), ('Brother', 'Brother'), ('Sister', 'Sister')], max_length=50)),
                ('status', models.CharField(choices=[('Active', 'Active'), ('Left', 'Left'), ('Deceased', 'Deceased')], default='Active', max_length=50)),
                ('proof_document_url', models.CharField(blank=True, help_text='Link to the scanned proof document.', max_length=255, null=True)),
            ],
            options={
                'verbose_name': 'Family Relationship',
                'verbose_name_plural': 'Family Relationships',
                'db_table': 'family_relationships',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CardPhotos',
            fields=[
                ('photo_id', models.AutoField(primary_key=True, serialize=False)),
                ('file_name', models.CharField(help_text='Original file name', max_length=255)),
                ('file_path', models.CharField(help_text='Path or URL to the stored image file', max_length=500)),
                ('file_size_bytes', models.BigIntegerField(blank=True, null=True)),
                ('mime_type', models.CharField(blank=True, help_text='e.g., image/jpeg, image/png', max_length=50, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('permit', models.OneToOneField(help_text='One photo per permit', on_delete=django.db.models.deletion.CASCADE, to='core.cardpermits')),
            ],
            options={
                'verbose_name': 'Card Photo',
                'verbose_name_plural': 'Card Photos',
                'db_table': 'card_photos',
            },
        ),
        migrations.CreateModel(
            name='Correspondence',
            fields=[
                ('correspondence_id', models.AutoField(primary_key=True, serialize=False)),
                ('reference_number', models.CharField(blank=True, max_length=255, null=True)),
                ('correspondence_date', models.DateField(blank=True, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('direction', models.CharField(choices=[('Incoming', 'Incoming'), ('Outgoing', 'Outgoing'), ('Internal', 'Internal')], help_text='the flow of the correspondence', max_length=50)),
                ('priority', models.CharField(choices=[('high', 'High'), ('normal', 'Normal'), ('low', 'Low')], default='normal', max_length=10)),
                ('summary', models.CharField(blank=True, max_length=1000, null=True)),
                ('parent_correspondence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.correspondence')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.correspondencetypes')),
            ],
            options={
                'verbose_name': 'Correspondence',
                'verbose_name_plural': 'Correspondence',
                'db_table': 'correspondence',
            },
        ),
        migrations.CreateModel(
            name='Attachments',
            fields=[
                ('attachment_id', models.AutoField(primary_key=True, serialize=False)),
                ('file_name', models.CharField(max_length=255)),
                ('file_path', models.CharField(max_length=1024)),
                ('file_type', models.CharField(blank=True, help_text='mime type', max_length=100, null=True)),
                ('file_size', models.BigIntegerField(blank=True, null=True)),
                ('correspondence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.correspondence')),
            ],
            options={
                'verbose_name': 'Attachment',
                'verbose_name_plural': 'Attachments',
                'db_table': 'attachments',
            },
        ),
        migrations.CreateModel(
            name='CorrespondenceProcedures',
            fields=[
                ('procedure_id', models.AutoField(primary_key=True, serialize=False)),
                ('procedure_date', models.DateField()),
                ('description', models.CharField(max_length=2000)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('notes', models.CharField(blank=True, max_length=1000, null=True)),
                ('letter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.correspondence')),
                ('responsible_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Correspondence Procedure',
                'verbose_name_plural': 'Correspondence Procedures',
                'db_table': 'correspondence_procedures',
            },
        ),
        migrations.CreateModel(
            name='EmploymentHistory',
            fields=[
                ('employment_record_id', models.AutoField(primary_key=True, serialize=False)),
                ('person_guid', models.UUIDField(help_text='Links this job record back to the person in People_History.')),
                ('job_title', models.CharField(blank=True, max_length=100, null=True)),
                ('still_hired', models.BooleanField(default=True)),
                ('start_date', models.DateTimeField(help_text='When this job record became active.')),
                ('end_date', models.DateTimeField(blank=True, help_text='Null means this is the current job record.', null=True)),
                ('is_current', models.BooleanField(default=True, help_text='Flag for the current job.')),
                ('version', models.IntegerField(help_text="Version number for this person's employment history.")),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.companieshistory')),
            ],
            options={
                'verbose_name': 'Employment History',
                'verbose_name_plural': 'Employment History',
                'db_table': 'employment_history',
            },
        ),
        migrations.CreateModel(
            name='Permits',
            fields=[
                ('permit_id', models.AutoField(primary_key=True, serialize=False)),
                ('permit_holder_type', models.CharField(choices=[('Person', 'Person'), ('Company', 'Company')], help_text='Specifies if the permit is for a person or a company.', max_length=20)),
                ('person_guid', models.UUIDField(blank=True, help_text='FK to People_History. Filled if PermitHolderType is Person.', null=True)),
                ('permit_status', models.CharField(choices=[('Pending', 'Pending'), ('Active', 'Active'), ('Rejected', 'Rejected'), ('Expired', 'Expired'), ('Revoked', 'Revoked')], default='Pending', help_text='Overall status derived from the ApprovalDecisions.', max_length=20)),
                ('effective_date', models.DateField(blank=True, help_text='When the permit becomes active.', null=True)),
                ('expiry_date', models.DateField(blank=True, help_text='When the permit expires.', null=True)),
                ('company', models.ForeignKey(blank=True, help_text='FK to Companies. Filled if PermitHolderType is Company.', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.companieshistory')),
            ],
            options={
                'verbose_name': 'Permit',
                'verbose_name_plural': 'Permits',
                'db_table': 'permits',
            },
        ),
        migrations.CreateModel(
            name='Relocation',
            fields=[
                ('relocation_id', models.AutoField(primary_key=True, serialize=False)),
                ('person_guid', models.UUIDField(help_text='FK to People_History. Person requesting relocation.')),
                ('approval_status', models.CharField(blank=True, choices=[('انتظار', 'انتظار'), ('حاصل', 'حاصل')], max_length=10, null=True)),
                ('building_number', models.IntegerField(blank=True, null=True)),
                ('building_letter', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D')], max_length=1, null=True)),
                ('flat_number', models.IntegerField(blank=True, null=True)),
                ('relocation_letter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.correspondence')),
            ],
            options={
                'verbose_name': 'Relocation',
                'verbose_name_plural': 'Relocations',
                'db_table': 'relocation',
            },
        ),
        migrations.CreateModel(
            name='RelocationPeriod',
            fields=[
                ('relocation_period_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('relocation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='periods', to='core.relocation')),
            ],
            options={
                'verbose_name': 'Relocation Period',
                'verbose_name_plural': 'Relocation Periods',
                'db_table': 'relocation_period',
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vehicle_id', models.IntegerField()),
                ('organization', models.CharField(choices=[('Owner', 'Owner'), ('Contractor', 'Contractor')], max_length=20)),
                ('plate_number', models.CharField(blank=True, max_length=10, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.companieshistory')),
                ('correspondence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.correspondence')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicle',
                'unique_together': {('vehicle_id', 'organization')},
            },
        ),
        migrations.CreateModel(
            name='CarPermit',
            fields=[
                ('car_permit_id', models.AutoField(primary_key=True, serialize=False)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.vehicle')),
            ],
            options={
                'verbose_name': 'Car Permit',
                'verbose_name_plural': 'Car Permits',
                'db_table': 'car_permit',
            },
        ),
        migrations.CreateModel(
            name='CorrespondenceContacts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Sender', 'Sender'), ('Recipient', 'Recipient'), ('CC', 'CC'), ('BCC', 'BCC')], max_length=20)),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.contacts')),
                ('correspondence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.correspondence')),
            ],
            options={
                'verbose_name': 'Correspondence Contact',
                'verbose_name_plural': 'Correspondence Contacts',
                'db_table': 'correspondence_contacts',
                'unique_together': {('correspondence', 'contact', 'role')},
            },
        ),
        migrations.CreateModel(
            name='PeopleHistory',
            fields=[
                ('person_record_id', models.AutoField(help_text='Primary key for this specific historical record.', primary_key=True, serialize=False)),
                ('person_guid', models.UUIDField(default=uuid.uuid4, help_text='The permanent, unchanging ID for an individual. Links all their records together.')),
                ('full_name_arabic', models.CharField(max_length=255)),
                ('full_name_english', models.CharField(blank=True, max_length=255, null=True)),
                ('nationality', models.CharField(blank=True, max_length=50, null=True)),
                ('national_id', models.CharField(blank=True, max_length=50, null=True)),
                ('access_areas', models.CharField(blank=True, max_length=50, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('qualification', models.CharField(blank=True, max_length=50, null=True)),
                ('id_address', models.CharField(blank=True, max_length=255, null=True)),
                ('alive', models.BooleanField(default=True)),
                ('id_scan', models.CharField(blank=True, help_text='link to the image of the Id', max_length=255, null=True)),
                ('face_encodings', models.TextField(blank=True, help_text='for face recognition - stored as JSON', null=True)),
                ('start_date', models.DateTimeField(help_text='The date this version of the information became effective.')),
                ('end_date', models.DateTimeField(blank=True, help_text='NULL means this is the current, active version.', null=True)),
                ('is_current', models.BooleanField(default=True, help_text='Flag to easily find the current version.')),
                ('version', models.IntegerField(help_text="Version number for this person's personal data history.")),
                ('response_letter', models.ForeignKey(blank=True, help_text='The number that we mentioned to respond on the Person with the Approval', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='responses', to='core.correspondence')),
                ('sc_request_letter', models.ForeignKey(blank=True, help_text='The letter the sc request was made', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sc_requests', to='core.correspondence')),
            ],
            options={
                'verbose_name': 'Person History',
                'verbose_name_plural': 'People History',
                'db_table': 'people_history',
                'indexes': [models.Index(fields=['person_guid'], name='people_hist_person__835d26_idx'), models.Index(fields=['is_current'], name='people_hist_is_curr_006636_idx')],
            },
        ),
        migrations.CreateModel(
            name='ApprovalDecisions',
            fields=[
                ('approval_decision_id', models.AutoField(primary_key=True, serialize=False)),
                ('decision_status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),
                ('decision_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, help_text='Required for verbal approvals.', max_length=1000, null=True)),
                ('approver_contact', models.ForeignKey(help_text='FK to the Contact (of type Organization) that is the official approver.', on_delete=django.db.models.deletion.CASCADE, to='core.contacts')),
                ('correspondence', models.ForeignKey(blank=True, help_text='Link to the formal letter of approval/rejection. NULL if verbal.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.correspondence')),
                ('permit', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.permits')),
            ],
            options={
                'verbose_name': 'Approval Decision',
                'verbose_name_plural': 'Approval Decisions',
                'db_table': 'approval_decisions',
                'unique_together': {('permit', 'approver_contact')},
            },
        ),
    ]
