import React, { useState } from "react";
import {
  Box,
  Typography,
  Paper,
  Tabs,
  Tab,
  Alert,
} from "@mui/material";
import { useAuth } from "../contexts/AuthContext";
import { useCorrespondenceConfig } from "../hooks/useCorrespondenceConfig";
import { useNotification } from "../hooks/useNotification";
import CorrespondenceTypesTab from "../components/CorrespondenceTypesTab";
import ProceduresTab from "../components/ProceduresTab";
import TypeDialog from "../components/TypeDialog";
import ProcedureDialog from "../components/ProcedureDialog";
import NotificationSnackbar from "../components/NotificationSnackbar";

function TabPanel({ children, value, index, ...other }) {
  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`config-tabpanel-${index}`}
      aria-labelledby={`config-tab-${index}`}
      {...other}
    >
      {value === index && <Box sx={{ p: 3 }}>{children}</Box>}
    </div>
  );
}

const CorrespondenceConfig = () => {
  const { isAdmin } = useAuth();
  const [tabValue, setTabValue] = useState(0);
  
  // Use custom hooks
  const {
    correspondenceTypes,
    procedures,
    selectedTypeId,
    loading,
    typeDialogOpen,
    procedureDialogOpen,
    editingType,
    editingProcedure,
    typeForm,
    procedureForm,
    setSelectedTypeId,
    setTypeDialogOpen,
    setProcedureDialogOpen,
    setTypeForm,
    setProcedureForm,
    handleAddType,
    handleEditType,
    handleSaveType,
    handleDeleteType,
    handleAddProcedure,
    handleEditProcedure,
    handleSaveProcedure,
    handleDeleteProcedure,
    handleDragEnd,
  } = useCorrespondenceConfig();

  const { notification, hideNotification } = useNotification();

  // Check if user is admin
  if (!isAdmin()) {
    return (
      <Box sx={{ p: 3 }}>
        <Alert severity="error">
          غير مسموح لك بالوصول إلى هذه الصفحة. يجب أن تكون مدير للوصول إلى
          إعدادات النظام.
        </Alert>
      </Box>
    );
  }

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        إعدادات الخطابات
      </Typography>
      <Typography variant="body1" color="text.secondary" sx={{ mb: 3 }}>
        إدارة أنواع الخطابات والإجراءات المرتبطة بها
      </Typography>

      <Paper sx={{ width: "100%" }}>
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          aria-label="correspondence config tabs"
          sx={{ borderBottom: 1, borderColor: "divider" }}
        >
          <Tab label="أنواع الخطابات" id="config-tab-0" />
          <Tab label="الإجراءات" id="config-tab-1" />
        </Tabs>

        <TabPanel value={tabValue} index={0}>
          <CorrespondenceTypesTab
            correspondenceTypes={correspondenceTypes}
            loading={loading}
            onAddType={handleAddType}
            onEditType={handleEditType}
            onDeleteType={handleDeleteType}
            onSelectType={setSelectedTypeId}
            selectedTypeId={selectedTypeId}
          />
        </TabPanel>

        <TabPanel value={tabValue} index={1}>
          <ProceduresTab
            procedures={procedures}
            selectedTypeId={selectedTypeId}
            correspondenceTypes={correspondenceTypes}
            loading={loading}
            onAddProcedure={handleAddProcedure}
            onEditProcedure={handleEditProcedure}
            onDeleteProcedure={handleDeleteProcedure}
            onDragEnd={handleDragEnd}
          />
        </TabPanel>
      </Paper>

      {/* Type Dialog */}
      <TypeDialog
        open={typeDialogOpen}
        onClose={() => setTypeDialogOpen(false)}
        editingType={editingType}
        typeForm={typeForm}
        setTypeForm={setTypeForm}
        onSave={handleSaveType}
        loading={loading}
      />

      {/* Procedure Dialog */}
      <ProcedureDialog
        open={procedureDialogOpen}
        onClose={() => setProcedureDialogOpen(false)}
        editingProcedure={editingProcedure}
        procedureForm={procedureForm}
        setProcedureForm={setProcedureForm}
        onSave={handleSaveProcedure}
        loading={loading}
      />

      {/* Notification Snackbar */}
      <NotificationSnackbar
        notification={notification}
        onClose={hideNotification}
      />
    </Box>
  );
};

export default CorrespondenceConfig;
                  },
                }}
              >
                {/* ID at the beginning */}
                <Box
                  sx={{
                    minWidth: 80,
                    mr: 2,
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    bgcolor: 'primary.main',
                    color: 'white',
                    borderRadius: 1,
                    p: 1,
                    fontWeight: 'bold',
                  }}
                >
                  #{type.correspondence_type_id || type.type_id}
                </Box>

                {/* Type name - takes remaining space */}
                <Box sx={{ flexGrow: 1, mr: 2 }}>
                  <Typography variant="h6" component="div">
                    {type.type_name}
                  </Typography>
                </Box>

                {/* Actions at the end */}
                <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>
                  <IconButton
                    color="primary"
                    onClick={() => handleEditType(type)}
                    title="تعديل"
                    size="small"
                  >
                    <EditIcon />
                  </IconButton>
                  <IconButton
                    color="error"
                    onClick={() =>
                      handleDeleteType(
                        type.correspondence_type_id || type.type_id
                      )
                    }
                    title="حذف"
                    size="small"
                  >
                    <DeleteIcon />
                  </IconButton>
                  <Button
                    size="small"
                    variant={
                      selectedTypeId ===
                      (type.correspondence_type_id || type.type_id)
                        ? "contained"
                        : "outlined"
                    }
                    onClick={() => {
                      const typeId =
                        type.correspondence_type_id || type.type_id;
                      setSelectedTypeId(typeId);
                      setTabValue(1); // Switch to procedures tab
                      loadProcedures(typeId); // Load procedures for this type
                    }}
                    startIcon={<SettingsIcon />}
                  >
                    إدارة الإجراءات
                  </Button>
                </Box>
              </Card>
            ))}
          </Box>
        </TabPanel>

        {/* Procedures Tab */}
        <TabPanel value={tabValue} index={1}>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              mb: 2,
            }}
          >
            <Typography variant="h6">
              إدارة الإجراءات
              {selectedTypeId && (
                <Chip
                  label={
                    correspondenceTypes.find(
                      (t) =>
                        (t.correspondence_type_id || t.type_id) ===
                        selectedTypeId
                    )?.type_name || "نوع محدد"
                  }
                  sx={{ ml: 1 }}
                />
              )}
            </Typography>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={handleAddProcedure}
              disabled={loading || !selectedTypeId}
            >
              إضافة إجراء جديد
            </Button>
          </Box>

          {!selectedTypeId ? (
            <Alert severity="info">
              يرجى اختيار نوع الخطاب من التبويب الأول لإدارة إجراءاته
            </Alert>
          ) : (
            <DndContext
              sensors={sensors}
              collisionDetection={closestCenter}
              onDragEnd={handleDragEnd}
            >
              <SortableContext
                items={procedures.map((p) => p.id)}
                strategy={verticalListSortingStrategy}
              >
                <List>
                  {procedures.map((procedure) => (
                    <SortableItem
                      key={procedure.id}
                      procedure={procedure}
                      onEdit={handleEditProcedure}
                      onDelete={handleDeleteProcedure}
                    />
                  ))}
                </List>
              </SortableContext>
            </DndContext>
          )}
        </TabPanel>
      </Paper>

      {/* Type Dialog */}
      <Dialog
        open={typeDialogOpen}
        onClose={() => setTypeDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {editingType ? "تعديل نوع الخطاب" : "إضافة نوع خطاب جديد"}
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="اسم النوع"
            fullWidth
            variant="outlined"
            value={typeForm.type_name}
            onChange={(e) =>
              setTypeForm({ ...typeForm, type_name: e.target.value })
            }
            required
            helperText="اسم نوع الخطاب (مطلوب)"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setTypeDialogOpen(false)}>إلغاء</Button>
          <Button
            onClick={handleSaveType}
            variant="contained"
            disabled={loading || !typeForm.type_name}
          >
            {editingType ? "تحديث" : "إضافة"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Procedure Dialog */}
      <Dialog
        open={procedureDialogOpen}
        onClose={() => setProcedureDialogOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>
          {editingProcedure ? "تعديل الإجراء" : "إضافة إجراء جديد"}
        </DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="اسم الإجراء"
            fullWidth
            variant="outlined"
            value={procedureForm.procedure_name}
            onChange={(e) =>
              setProcedureForm({
                ...procedureForm,
                procedure_name: e.target.value,
              })
            }
            sx={{ mb: 2 }}
          />
          <TextField
            margin="dense"
            label="الوصف"
            fullWidth
            multiline
            rows={3}
            variant="outlined"
            value={procedureForm.description}
            onChange={(e) =>
              setProcedureForm({
                ...procedureForm,
                description: e.target.value,
              })
            }
            sx={{ mb: 2 }}
          />
          <TextField
            margin="dense"
            label="الترتيب"
            type="number"
            fullWidth
            variant="outlined"
            value={procedureForm.procedure_order}
            onChange={(e) =>
              setProcedureForm({
                ...procedureForm,
                procedure_order: parseInt(e.target.value) || 1,
              })
            }
            sx={{ mb: 2 }}
          />
          <FormControlLabel
            control={
              <Switch
                checked={procedureForm.is_initial}
                onChange={(e) =>
                  setProcedureForm({
                    ...procedureForm,
                    is_initial: e.target.checked,
                  })
                }
              />
            }
            label="إجراء ابتدائي (يتم تعيينه تلقائياً للخطابات الجديدة)"
            sx={{ mb: 1 }}
          />
          <FormControlLabel
            control={
              <Switch
                checked={procedureForm.is_final}
                onChange={(e) =>
                  setProcedureForm({
                    ...procedureForm,
                    is_final: e.target.checked,
                  })
                }
              />
            }
            label="إجراء نهائي (يعتبر الخطاب مكتملة)"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setProcedureDialogOpen(false)}>إلغاء</Button>
          <Button
            onClick={handleSaveProcedure}
            variant="contained"
            disabled={loading || !procedureForm.procedure_name}
          >
            {editingProcedure ? "تحديث" : "إضافة"}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Notification Snackbar */}
      <Snackbar
        open={notification.open}
        autoHideDuration={6000}
        onClose={() => setNotification({ ...notification, open: false })}
      >
        <Alert
          onClose={() => setNotification({ ...notification, open: false })}
          severity={notification.severity}
          sx={{ width: "100%" }}
        >
          {notification.message}
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default CorrespondenceConfig;
